/*
Copyright 2015 ARL
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License.

Author: Steven Thompson
Development Time Frame: February to March, 2015
Purpose: This script is used to listen for nearby detonation and cause the attached primitive to respond accordingly
Use: This script should be applied to a primitive object
*/

integer explosionChannel = -1337; // Channel that objects involved in explosion use 
float blastRadius = 2.0; 
integer counter = 0; // Used to stop objects from moving around too much after detonation 
integer superCounter = 0; // Used to stop objects from moving around too much after detonation 
default
{
    state_entry()
    {
        integer listenHandle = llListen(explosionChannel, "", "", "");
    }
    listen (integer channel, string name, key id, string message)
    {
        list messageList = llParseString2List(message, ["|"], []);// Parse Message to get greande position and explosion force
        vector grenadeLocation = llList2Vector(messageList, 0); // Grenade position is in the first cell of the list
        float explosionForce = (float)llList2String(messageList, 1);  // Explosion force value is in the second cell of the list
        vector objectLocation = llGetPos();
        vector diff = objectLocation-grenadeLocation; // Get the distance between the grenade and the brick
        float mag = llVecMag(diff);
        float cylinderMag  = llVecMag(<diff.x, diff.y, 0>); // Check nearby bricks to make sure none are left hangning in midair
        if(cylinderMag < blastRadius && diff.z < blastRadius*2){ // Make bricks within blast radius and those near destroyed bricks ready to react to detonation
            llSetStatus(STATUS_PHYSICS, TRUE); // make the object Physical
            llSetStatus(STATUS_PHANTOM, FALSE); // no phantom objects
        }
        if(mag < blastRadius){ // Make all bricks within blast radius to get exploded
            float brickMass = llGetMass();
            vector velocityVector = explosionForce*diff; // Physics I stuff... 
            vector momentumVector = brickMass * velocityVector; // more Physics I stuff...
            llApplyImpulse(momentumVector, FALSE); // Apply the impulse... Physics I stuff
            llSetTimerEvent(1.0); // Start timer to make the bricks come to rest after so many seconds
        }
    }
    timer()
    {        
        counter++;
        if (counter == 20) {
            if (llVecMag(llGetVel()) == 0) {
                llSetStatus(STATUS_PHYSICS, FALSE); // If the object has stopped moving, make it Non-physical
            } else if(superCounter == 5){
                llSetVelocity(<0.0,0.0,0.0>, FALSE);
                llSetStatus(STATUS_PHYSICS, FALSE);
            } else {
                counter = 0;
                superCounter++;
            }
        }
    }
}
